application {
  config {
    applicationType        monolith
    authenticationType     oauth2
    baseName               course_management
//  blueprints
    buildTool              maven
    cacheProvider          no
    clientFramework        react
    clientPackageManager   npm
    clientTheme            none
//  clientThemeVariant
    databaseType           sql
    devDatabaseType        postgresql
    dtoSuffix              DTO
    enableHibernateCache   false
    enableSwaggerCodegen   false
    enableTranslation      false
//  entitySuffix
    jhiPrefix              cm
    languages              [en]
    messageBroker          false
    nativeLanguage         en
    packageName            com.spiashko.cm
    prodDatabaseType       postgresql
    reactive               false
    searchEngine           false
    serverPort             8080
    serviceDiscoveryType   false
    skipClient             false
    skipServer             false
    skipUserManagement     false
    testFrameworks         []
    websocket              false
  }
  entities *
}

entity Course {
  title String required minlength(3) maxlength(50)
  imageUrl String required minlength(3) maxlength(200)
}

entity CourseExtraInfo {
  summary TextBlob required /**basically md file**/
}

entity Module {
  title String required minlength(3) maxlength(50)
}

entity Lesson {
  order Integer required
  title String required
  type LessonType required
}

entity LessonExtraInfo {
  content TextBlob required /**basically md file with link to video if needed**/
}

entity CompletedLesson {
}

entity Enrollment {
}

entity UserExtraInfo {
  bio TextBlob /**basically md file**/
}

enum LessonType {
  TEXT,
  VIDEO
}

relationship OneToOne {
  UserExtraInfo{user required} to User with jpaDerivedIdentifier
  CourseExtraInfo{course required} to Course with jpaDerivedIdentifier
  LessonExtraInfo{lesson required} to Lesson with jpaDerivedIdentifier
}

relationship OneToMany {
  Course{modules} to Module{course required}
  Module{lessons} to Lesson{module required}

  Enrollment{completedLessons} to CompletedLesson{enrollment required}
}

relationship ManyToOne {
  Enrollment{course required} to Course
  Enrollment{student required} to User

  Course{teacher required} to User

  CompletedLesson{lesson required} to Lesson
}

paginate Course with pagination

